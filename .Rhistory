total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){if(tsurname[x]<=2) small})
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){if(tsurname[x]<=2) "small"})
table(total$surname)
?ifelse
title<-function(x){
strsplit(x,"[,.]")[[1]][2]
}
total$Title<-sapply(as.character(total$Name),title)
table(total$Title)
total$Title<-gsub("Capt|Col|Don$|Jonkheer|Major|Sir","Mr",total$Title)
total$Title<-gsub("Dona|Mme|the Countess","Mrs",total$Title)
total$Title<-gsub("Lady|Mlle|Ms","Miss",total$Title)
table(total$Title)
surname<-function(x){
strsplit(x,"[,.]")[[1]][1]
}
total$surname<-sapply(as.character(total$Name),surname)
tsurname<-table(total$surname)
total$surname<-sapply(total$surname,function(x){ifelse(tsurname[x]<=2,"small",x)})
table(total$surname)
n=nrow(train)
train<-total[1:n,]
test<-total[-(1:n),]
traincontrol<-trainControl(method="repeatedcv")
traindata<-train[,-c(1,4,9,11)]
modFit<-train(as.factor(Survived)~.,data=traindata,method="rf",trControl=traincontrol)
modFit2<-train(as.factor(Survived)~.,data=traindata,method="rpart",trControl=traincontrol)
modFit3<-train(as.factor(Survived)~.,data=traindata,method="gbm",trControl=traincontrol,verbose=FALSE)
modFit4<-train(as.factor(Survived)~.,data=traindata,method="nb",trControl=traincontrol)
modFit
modFit2
modFit3
modFit4
test$Survived<-predict(modFit,test)
table(total$surname)
table(test$surname)
swirl()
library(swirl)
swirl()
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
svd1$d
svd1$u
dim(svd1$d)
svd1$d
svd1$d[1]
a1<-(svd1$u[,1]*svd1$d[1])
a1
dim(a1)
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1]
)
myImage(a1)
a2<-(svd1$u[,1:2]*svd1$d[1:2])%*%t(svd1$v[,1:2]
)
a2<-(svd1$u[,1:2]*svd1$d[1:2])%*%t(svd1$v[,1:2])
svd1$d[1:2]
diag(svd1$d[1:2])
a2<-(svd1$u[,1:2]*diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2<-(svd1$u[,1:2]%*%diag(svd1$d[1:2]))%*%t(svd1$v[,1:2])
a2<-svd1$u[,1:2] %*% diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a5<-svd1$u[,1:5] %*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(a5)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dist(dataFrame)
hc<_hcluster(distxy)
hc<-hcluster(distxy)
hc<-hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
rm(lis=ls())
rm(list=ls())
library(shiny)
library(ggplot2)
library(maps)
library(RColorBrewer)
world_map<-map_data("world")
world_map<-map_data("world")
world_map$region<-factor(world_map$region)
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)))
g
g+labs(fill="")
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.factor(as.numeric(region))))
g
g
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)))
g
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
library(grid)
g<- ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
install.packages("mapproj")
g<- g + coord_map("ortho",orientation=c(45,130,130))
g
g<- g + scale_y_continuous(breaks=(-6:6)*15)
+ scale_x_continuous(breaks=(-12:12)*15)
g<- g + scale_y_continuous(breaks=(-6:6)*15) + scale_x_continuous(breaks=(-12:12)*15)
g
g<-g+scale_fill_brewer(name="million($)",palette=input$var1)
g<-g+scale_fill_brewer(name="million($)",palette="PiYG")
g
g<- g + theme(
panel.background=element_rect(fill="white",colour=NA),
panel.grid.major = element_line(colour = "grey60",size=.25),
panel.grid.minor = element_line(colour = "grey60",size=.25),
axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank())
g
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
g<- ggplot()
g<- g + geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
g<- ggplot() + geom_polygon(data=world_map,aes(x=long,y=lat,group=group,fill=as.numeric(region)),
colour="grey",size=.25)
g
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
head(world_map)
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
?scale_fill_brewer
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
(d <- ggplot(dsamp, aes(carat, price)) +
geom_point(aes(colour = clarity)))
d + scale_colour_brewer()
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/Data-Specilisation/C9Week4/world')
head()
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Coursera/C9Week1/random')
iris
?select
library(tidyverse)
?select
iris[1:5,] %>% select(SL=Sepal.Length)
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A=ABC)
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A)
iris[1:5,] %>% select(c(SL,SW)=c(Sepal.Length,Sepal.Width))
iris[1:5,] %>% select(SL=Sepal.Length,SW=Sepal.Width,A=)
s="SL=Sepal.Length"
iris[1:5,] %>% select(s)
iris[1:5,] %>% select("Sepal.Length")
s=list("Sepal.Length","Sepal.Width")
iris[1:5,] %>% select(s)
s=c("Sepal.Length","Sepal.Width")
iris[1:5,] %>% select(s)
s=c("Sepal.Length","Sepal.Width","A")
iris[1:5,] %>% select(s)
s=c("Sepal.Width","Sepal.Length","A")
s=c("Sepal.Width","Sepal.Length")
iris[1:5,] %>% select(s)
iris[1:5,]$a
iris[1:5,]$a<-iris[1:5,]$a
iris[1:5,]
abc<-iris[1:5,]
abc
colnames(a)<-letters[1:9]
colnames(abc)<-letters[1:9]
c<-repeat(c(True,FALSE,TRUE),3)
c<-rep(c(True,FALSE,TRUE),3)
c<-rep(c(TRUE,FALSE,TRUE),3)
letters[c]
c
letters[1:9][c]
a
s
s %in% colnames(iris)
s
s<-c(s,"ABC")
s
s %in% colnames(iris)
con<-s %in% colnames(iris)
s[con]
sapply(s[con], function(x) abc$x=iris$x)
abc
sapply(s[con], function(x) ab$x=iris$x)
ab<=data.frame
ab<-data.frame()
ab
sapply(s[con], function(x) ab$x=iris$x)
iris$s[1]
sapply(s[con], function(x) ab[,x]=iris[,x])
shiny::runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
install.packages("shinydashboardPlus")
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
runApp('C:/Users/Wang Xiaoyuan/Desktop/Rdata/Juvoxa')
library(XML)
doc <- xmlTreeParse("http://www.w3schools.com/xml/simple.xml",useInternal = TRUE )
doc <- xmlTreeParse("https://www.w3schools.com/xml/simple.xml",useInternal = TRUE )
rootNode <- xmlNode(doc)
?xmlTreeParse
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal = TRUE )
fileUrl <- https://www.w3schools.com/xml/simple.xml
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal = TRUE )
doc <- htmlTreeParse(fileUrl,useInternal = TRUE )
doc <- xmlTreeParse(download.file("http://www.w3schools.com/xml/simple.xml"),useInternalNodes  = TRUE )
?download.file()
doc <- xmlTreeParse(download.file("http://www.w3schools.com/xml/simple.xml",unknow),useInternalNodes  = TRUE )
doc <- xmlTreeParse(download.file("http://www.w3schools.com/xml/simple.xml", "unknown"),useInternalNodes  = TRUE )
doc <- xmlTreeParse(download.file("http://www.w3schools.com/xml/simple.xml", "simple.xml"),useInternalNodes  = TRUE )
getwd()
doc <- htmlTreeParse("simple.xml",useInternalNode = TRUE )
rootNode <- xmlRoot(doc)
names(rootNode)
xmlnames(rootNode)
xmlName(rootNode)
rootNode
download.file("http://www.w3schools.com/xml/simple.xml", destfile="simple.xml")
doc <- htmlTreeParse("simple.xml",useInternalNode = TRUE )
rootNode
doc <- htmlTreeParse("simple.xml",useInternalNodes = TRUE )
rootNode
names(rootNode)
rootNode<-xmlroot(doc)
rootNode<-xmlRoot(doc)
names(rootNode)
>xmlRoot
?xmlRoot
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[1]][[1]]
doc<-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
url<-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(url,destfile = "rest.xml")
doc<-xmlTreeParse("rest.xml",useInternalNodes = TRUE)
rootNode<-xmlRoot(doc)
dim(rootNode)
rootName(rootNode)
names(rootNode)
rootNode[[1]]
names(rootNode)
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xpathSApply(rootNode,"//zipcode",xmlValue)
sum(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
xpathSApply(rootNode,"//location_1[@human_address]",xmlValue)
xpathSApply(rootNode,"//location_1[@human_address="{&quot;address&quot;:&quot;4509 BELAIR ROAD&quot;,&quot;city&quot;:&quot;Baltimore&quot;,&quot;state&quot;:&quot;MD&quot;,&quot;zip&quot;:&quot;&quot;}"]",xmlValue)
library(httr)
library(httr)
oauth_endpoints("github")\
myapp <- oauth_app("github",
key = "3632a57d2766af4343a5",
secret = "5d0f9eb169fea4cb321993e5fe3a8e4524bf7f81"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
length(req)
req[1]
req[[1]]
req
library(jsonlite)
a<-fromJSON(req)
content(req)
a<-fromJSON(content(req))
a<-fromJson(toJSON(content(req)))
?fromJson
?fromJSON
library(jsonlite)
a<-fromJSON(toJSON(content(req)))
a[1]
length(a)
names(a)
a$created_at
a$name=="datasharing"
a[a$name=="datasharing"]$created_at
a[a$name=="datasharing"]
a$name
a[[a$name=="datasharing"]]
a[a$name=="datasharing",]
a[a$name=="datasharing",]$created_at
con<-connect("http://biostat.jhsph.edu/~jleek/contact.html")
library(jsonlite)
jasonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jasonData)
names(jasonData$owner)
jasonData$owner$login
jsonData<-fromJSON("https://api.github.com/users/shawvin/repos")
names(jsonData)
names(jsonData$owener)
names(jsonData$id)
names(jsonData$full_name)
sapply(jsonData,length)
jsonData$owner
names(jsonData$owner)
names(jsonData$id)
jsonData$id
jsonData$names
jsonData$name
?xpathSApply
library(httr)
?xpathSApply
??xpathSApply
ppois(1,0.1)
?ppois
ppois(0.1,0.1)
ppois(1,1)
install.packages("RGtk2")
library(RGtk2)
library(RGtk2)
install.packages("rattle")
library(rattle)
rattle()
rattle()
irisX<-scale(iris[1:150, 1:4])
head(irisX)
colMeans(iris[1:150, 1:4])
irisX<-scale(iris[1:150, 1:4], scale=FALSE)
head(irisX)
C<-t(irisX) %*% irisX/149
scdC<-svd(C)
C
svdC<-scdC
svdC$d
prop.table(svdC$d)
pcaX<-princomp(iris[1:150, 1:4])
pcaX$sdev
pcaX$sdev^2
summary(pcaX)
svdC$v
pcaX$loadings
head(pcaX$scores)
svdC %*% svdC$u
svdC
C %*% svdC$u
head(iris[1:150, 1:4] %*% svdC$u)
head(iris[1:150, 1:4])
head(as.matrix(iris[1:150, 1:4]) %*% svdC$v)
head(as.matrix(iris[1:150, 1:4]) %*% diag(svdC$d) %*% svdC$v)
head(as.matrix(irisX[1:150, 1:4]) %*% svdC$v)
pcairis<-as.matrix(irisX[1:150, 1:4]) %*% svdC$v
head(pcairis)
head(pcaX)
head(pcaX)
head(pcaX$scores)
head(pcairis)
irisD<-iris[1:150, 1:4]
svdiris<-svd(irisD)
svdiris$d
svd(t(irisD) %*% irisD)
svd(t(as.matrix(irisD)) %*% as.matrix(irisD))
svdiris$d^2
prop.table(svdiris$d)
prop.table(svdiris$d^2)
prop.table(svdC$d)
svdiris$u
svd(t(as.matrix(irisD)) %*% as.matrix(irisD))
svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u
svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u^2
colsum(svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u^2)
colSum(svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u^2)
colSums(svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u^2)
rowSums(svd(t(as.matrix(irisD)) %*% as.matrix(irisD))$u^2)
library(arules)
library(arulesViz)
## load grocey data
data("Groceries")
## inspect the data
summary(Groceries)
## There are 9835 rows and 169 columns
colnames(Groceries)
inspect(Groceries[1:3])
## which items are frequent?
itemFrequencyPlot(Groceries, support=0.01)
itemFrequencyPlot(Groceries, topN=11)
## find frequenct itemset
bfsets<-eclat(Groceries, parameter = list(support=0.01), control = list(verbose=FALSE))
summary(bfsets)
## Generate association rule
Brules<-apriori(Groceries, parameter=list(support=0.01, confidence=0.3))
inspect(sort(Brules,by="lift")[1:10])
inspect(sort(Brules,by="support")[1:10])
inspect(sort(Brules,by="confidence")[1:10])
dim(Brules)
summary(Brules)
summary(bfsets)
summary(bfsets)
summary(bfsets)
inspect(sort(Brules,by="support")[1:10])
quality(Brules)
bfsets<-eclat(Groceries, parameter = list(support=0.2), control = list(verbose=FALSE))
summary(bfsets)
bfsets<-eclat(Groceries, parameter = list(support=0.01), control = list(verbose=FALSE))
summary(bfsets)
## find frequenct itemset
bfsets<-eclat(Groceries, parameter = list(support=0.2), control = list(verbose=FALSE))
summary(bfsets)
bfsets<-eclat(Groceries, parameter = list(support=0.01), control = list(verbose=FALSE))
summary(bfsets)
itemFrequencyPlot(Groceries, topN=11)
itemFrequencyPlot(bfsets)
summary(bfsets)
Groceries
inspect(Groceries[1:3])
## which items are frequent?
itemFrequencyPlot(Groceries, support=0.01)
itemFrequencyPlot(Groceries, topN=11)
itemFrequencyPlot(Groceries, topN=20)
summary(bfsets)
Brules<-apriori(Groceries, parameter=list(support=0.2, confidence=0.3))
inspect(sort(Brules,by="support")[1:10])
## Generate association rule
Brules<-apriori(Groceries, parameter=list(support=0.05, confidence=0.3))
## Generate association rule
Brules<-apriori(Groceries, parameter=list(support=0.01, confidence=0.3))
inspect(sort(Brules,by="support")[1:10])
## Generate association rule
Brules<-apriori(Groceries, parameter=list(support=0.05, confidence=0.3))
inspect(sort(Brules,by="support")[1:10])
inspect(sort(Brules,by="support"))
## Generate association rule
Brules<-apriori(Groceries, parameter=list(support=0.01, confidence=0.3))
inspect(sort(Brules,by="support")[1:10])
setwd("C:/Users/Wang Xiaoyuan/Desktop/Data Visulization and Dashboarding with R")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
library("tidyverse")
install.packages("tidyverse", type="source")
update.packages(..., checkBuilt=TRUE)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
gc()
